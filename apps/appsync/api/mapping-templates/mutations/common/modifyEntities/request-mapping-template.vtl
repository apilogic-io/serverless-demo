#set($operations = $ctx.stash.payload)
#set($transactionItems = [])
{
  "version": "2018-05-29",
  "operation": "TransactWriteItems",
  "transactItems": [
    #foreach($operation in $operations)
      #set($operationHasNext = $foreach.hasNext)

      #set($uniqueConstraints = $operation.get("uniqueConstraints"))
      #set($action = $operation.get("action"))

      ## UpdateItem logic
      #if($action == "UpdateItem")
        ## Set up some space to keep track of things we're updating **
        #set($entity = $operation.get("entity"))
        #set($entityKey = "id")
        #set($entityTable = $operation.get("tableName"))
        #if(!$util.isNull($entity))

          #set( $expNames  = {} )
          #set( $expValues = {} )
          #set( $expSet = {} )
          #set( $expRemove = [] )
          #set( $key = "")

          ## Iterate through each argument, skipping "id" and "expectedVersion" **

          #foreach($entry in $entity.entrySet())
            #if('id' != $entry.key)
              #if($util.isNull($entry.value))
                ## If the argument is set to "null", then remove that attribute from the item in DynamoDB **
                #set( $discard = ${expRemove.add("#${entry.key}")} )
                $util.qr($expNames.put("#${entry.key}", "$entry.key"))
              #else
                ## Otherwise set (or update) the attribute on the item in DynamoDB **
                $util.qr($expSet.put("#${entry.key}", ":${entry.key}"))
                $util.qr($expNames.put("#${entry.key}", "$entry.key"))
                $util.qr($expValues.put(":${entry.key}", ${entry.value}))
              #end
            #end
          #end

          ## Start building the update expression, starting with attributes we're going to SET **
          #set( $expression = "" )
          #if( !${expSet.isEmpty()} )
            #set( $expression = "SET" )
            #foreach( $entry in $expSet.entrySet() )
              #set( $expression = "${expression} ${entry.key} = ${entry.value}" )
              #if ( $foreach.hasNext )
                #set( $expression = "${expression}," )
              #end
            #end
          #end
          ## Continue building the update expression, adding attributes we're going to REMOVE **
          #if( !${expRemove.isEmpty()} )
            #set( $expression = "${expression} REMOVE" )

            #foreach( $entry in $expRemove )
              #set( $expression = "${expression} ${entry}" )
              #if ( $foreach.hasNext )
                #set( $expression = "${expression}," )
              #end
            #end
          #end

          {
            "operation" : "${action}",
            "table":"${entityTable}",
            "key" : {
              "id": $util.dynamodb.toDynamoDBJson($entity.id)
              #if(!$util.isNull($operation.get("ownerId")))
              ,"owner_id": $util.dynamodb.toDynamoDBJson($operation.get("ownerId"))
              #end
            },
            "update" : {
              "expression" : "${expression}"
              #if( !${expNames.isEmpty()} )
                ,"expressionNames" : $utils.toJson($expNames)
              #end
              #if( !${expValues.isEmpty()} )
                ,"expressionValues" : $util.dynamodb.toMapValuesJson($expValues)
              #end
            }
          }
          #if( $operationHasNext || $operation.get("uniqueConstraints").size() > 0)
            ,
          #end
        #end
        #if($uniqueConstraints.size() > 0)
          #foreach($constraint in $uniqueConstraints)
              {
                "table" : "${entityTable}",
                "operation" : "DeleteItem",
                "key" : {
                  "id" : $util.dynamodb.toDynamoDBJson($constraint.get("existing"))
                }
              },
              {
                "table" : "${entityTable}",
                "operation" : "PutItem",
                "key" : {
                  "id" : $util.dynamodb.toDynamoDBJson($constraint.get("new"))
                },
                "condition" : {
                  "expression": "attribute_not_exists(id)"
                }
              }
              #if( $foreach.hasNext || $operationHasNext )
              ,
              #end
          #end
        #end

        ## PutItem logic
      #elseif($action == "PutItem")
        {
          "table": "$operation.get("tableName")",
          "operation":"$operation.get("action")",
          "key" : {
            "id": $util.dynamodb.toDynamoDBJson($operation.get("id"))
          #if(!$util.isNull($operation.get("ownerId")))
            ,"ownerId": $util.dynamodb.toDynamoDBJson($operation.get("ownerId"))
          #end
          },
          "condition": {
            "expression": "attribute_not_exists(id)"
          },
          "attributeValues" : $util.dynamodb.toMapValuesJson($operation.get("entity"))
        }
        #if( $operationHasNext || $operation.get("uniqueConstraints").size() > 0)
          ,
        #end
        #if($uniqueConstraints.entrySet().size() > 0)
          #foreach($constraint in $uniqueConstraints)
            {
              "table": "$operation.get("tableName")",
              "operation":"$operation.get("action")",
              "key" : {
              "id": $util.dynamodb.toDynamoDBJson($operation.get("entity")[$constraint])
              },
              "condition": {
                "expression": "attribute_not_exists(id)"
              }
            }
            #if( $foreach.hasNext || $operationHasNext)
              ,
            #end
          #end
        #end
      #end
    #end
  ]
}
